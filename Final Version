{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fbadd4f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random, math\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "from IPython.display import HTML\n",
    "from pandas import Series\n",
    "import itertools\n",
    "import networkx as nx\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "06a70b09",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_adopters(pop, dis, prob):\n",
    "    #s = innovators + early_adopters + late_adopters + laggards\n",
    "    y = np.zeros(pop)\n",
    "    for i in range(0,pop,1):\n",
    "        if i <= dis[0]*pop:\n",
    "            y[i] = prob[0]\n",
    "        elif i <= (dis[0]+dis[1])*pop:\n",
    "            y[i] = prob[1]\n",
    "        elif i <= (dis[0]+dis[1]+dis[2])*pop:\n",
    "            y[i] = prob[2]\n",
    "        else:\n",
    "            y[i] = prob[3]\n",
    "    return y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8a0898e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "def friends(population: int)-> None:\n",
    "    people = list(range(population))                                 # List of people\n",
    "    friendships = {}                                                 # Empty dictionary to hold the friendships\n",
    "\n",
    "    for person in people:                                            # Iterate over each person and randomly assign their friends\n",
    "        num_friends = random.randint(0, 20)              # Choose a random number of friends for this person\n",
    "        friends = random.sample(set(people)-{person}, num_friends)   # Choose random friends for this person\n",
    "        friendships[person] = friends                                # Add this person's friends to the dictionary\n",
    "    \n",
    "    matrix = np.zeros((population, population)) \n",
    "    for person, friends in friendships.items():\n",
    "        for friend in friends:\n",
    "            matrix[person, friend] = 1\n",
    "            matrix[friend, person] = 1\n",
    "    return matrix\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ff623a0c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def list_friends(person: int, m: None) -> list[int]:\n",
    "    \n",
    "    person_list = m.tolist()[person]\n",
    "    friendlist = [i for i, x in enumerate(person_list) if x > 0]\n",
    "    return friendlist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f4ea9ba9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def count_interested_friends(friends: list[int]) -> int:\n",
    "    \n",
    "    count = 0\n",
    "    for i in friends:\n",
    "        if Status[i] == 'adop':\n",
    "            count += 1\n",
    "    return count\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "96ecdec6",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Public\\Documents\\Wondershare\\CreatorTemp\\ipykernel_9608\\2316478344.py:7: DeprecationWarning: Sampling from a set deprecated\n",
      "since Python 3.9 and will be removed in a subsequent version.\n",
      "  friends = random.sample(set(people)-{person}, num_friends)   # Choose random friends for this person\n"
     ]
    }
   ],
   "source": [
    "population = 1000 #population size\n",
    "\n",
    "Friend_matrix = friends(population) \n",
    "Friend_list = [list_friends(i,Friend_matrix) for i in range(population)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6fbc5763",
   "metadata": {},
   "outputs": [],
   "source": [
    "time_max = 100 #max run time\n",
    "\n",
    "distribution = [0.025, 0.135, 0.34, 0.5] #different types of adopters distribution\n",
    "adopt_probability = [80, 120, 180, 260] #probability associated with types of adopters\n",
    "bore_probability = [1, 1, 1, 1] \n",
    "\n",
    "friend_weight = 10 #generate adoption weight from friends\n",
    "mass_weight = 10 #generate adoption weight from total population\n",
    "\n",
    "interest_loss = 5 #interest loss per day\n",
    "interest_period = 30"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b1b4ca90",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x26928a023a0>]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "day = 1 # starting day\n",
    "\n",
    "Person = range(0,population,1) #generate people\n",
    "Status = 10*['adop'] + (population-10)*['unadop'] #generate status of people\n",
    "Time = [1] + (population-1)*[0] #generate time person adopted trend\n",
    "Threshhold = create_adopters(population, distribution, adopt_probability) #generate threshold to adopting trend\n",
    "\n",
    "unadopted = []\n",
    "adopted = []\n",
    "bored = []\n",
    "\n",
    "while day < time_max:\n",
    "    \n",
    "    for i,s,p,f,d in zip(Person, Status, Threshhold, Friend_list, Time): #the code iterates through every person\n",
    "        \n",
    "        amount_of_interested_friends = count_interested_friends(f)\n",
    "        friend_prob = friend_weight*amount_of_interested_friends\n",
    "        mass_prob = mass_weight*Status.count('adop')/population\n",
    "        \n",
    "        prob = (friend_prob + mass_prob)/p #add probability due to adoption by other people\n",
    "        \n",
    "        if (s == 'adop'):\n",
    "            Threshhold[i] += random.randint(0,interest_loss)\n",
    "            if random.random() > prob and d + random.randint(0,interest_period) < day:\n",
    "                Status[i] = 'unadop'\n",
    "                Time[i] = day\n",
    "                #Threshhold[i] -= commitment if Threshhold[i] > commitment else 0\n",
    "\n",
    "                \n",
    "        if (s == 'unadop') and random.random() < prob and d + random.randint(0,interest_period) < day: #chance person adopts the innovation\n",
    "            Status[i] = 'adop'\n",
    "            Time[i] = day\n",
    "            #Threshhold[i] -= commitment if Threshhold[i] > commitment else 0\n",
    "        \n",
    "    #print(f\"{Status.count('adop')} have adopted the trend on day {day}\")\n",
    "    unadopted.append(Status.count('unadop'))\n",
    "    adopted.append(Status.count('adop'))\n",
    "    \n",
    "    day = day+1\n",
    "\n",
    "plt.plot(adopted, 'b')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2aa968f7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
